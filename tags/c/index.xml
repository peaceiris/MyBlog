<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Lucabol blog</title>
    <link>https://peaceiris.com/MyBlog/tags/c/</link>
    <description>Recent content in C on Lucabol blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Mar 2013 15:29:05 +0000</lastBuildDate>
    
	<atom:link href="https://peaceiris.com/MyBlog/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Funky C for literate programming</title>
      <link>https://peaceiris.com/MyBlog/posts/2013-03-20-funky-c-for-literate-programming/</link>
      <pubDate>Wed, 20 Mar 2013 15:29:05 +0000</pubDate>
      
      <guid>https://peaceiris.com/MyBlog/posts/2013-03-20-funky-c-for-literate-programming/</guid>
      <description>Main ideas This is a port of LLIte in C. The reason for it is to experiment with writing functional code in standard C and compare the experience with using a functional language like F#. It is in a way a continuation of my previous posts on the topic.
I will be using glib and an header of convenient macros/functions to help me (lutils.h). I don’t think that is cheating. Any modern C praticoner has its bag of tricks …</description>
    </item>
    
    <item>
      <title>Functional programming in C: Implementation</title>
      <link>https://peaceiris.com/MyBlog/posts/2013-01-11-functional-programming-in-c-implementation/</link>
      <pubDate>Fri, 11 Jan 2013 16:37:00 +0000</pubDate>
      
      <guid>https://peaceiris.com/MyBlog/posts/2013-01-11-functional-programming-in-c-implementation/</guid>
      <description>Cleanup Let&amp;rsquo;s start simple with the cleanup function. First we need the usual barrage of includes. G_BEGIN_DECLS allows the header to be linked in C++.
#ifndef L_UTILS_INCLUDED#define L_UTILS_INCLUDED #include &amp;#34;glib.h&amp;#34; G_BEGIN_DECLS #include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;This feature is GCC specific. It uses __attribute((cleanup(f))) where f is the cleanup function. In this case the cleanup function just frees the memory. #ifdef __GNUC__ static inline void __autofree(void *p) { void **_p = (void**)p; free(*_p); } auto_clean is a building block that you can use to plug in your own cleanup function.</description>
    </item>
    
    <item>
      <title>Functional programming in C</title>
      <link>https://peaceiris.com/MyBlog/posts/2013-01-04-functional-programming-in-c/</link>
      <pubDate>Fri, 04 Jan 2013 14:45:00 +0000</pubDate>
      
      <guid>https://peaceiris.com/MyBlog/posts/2013-01-04-functional-programming-in-c/</guid>
      <description>This post/program (as I’m writing it in literate style) is a continuation of my previous posts about functional programming in C++. I promise I’m not going to post about doing it in assembly language (I think) ….
I came to like the simplicity of C very much and got interested in how you could write functional code in it.
There is one irritating thing about C as a viable programming language.</description>
    </item>
    
    <item>
      <title>LLite : language friendly literate programming</title>
      <link>https://peaceiris.com/MyBlog/posts/2012-12-14-llite-language-friendly-literate-programming/</link>
      <pubDate>Fri, 14 Dec 2012 12:29:26 +0000</pubDate>
      
      <guid>https://peaceiris.com/MyBlog/posts/2012-12-14-llite-language-friendly-literate-programming/</guid>
      <description>Main ideas My interest in literate programming comes from some realizations on my part:
 When I go back to code that I have written some time ago, I don&amp;rsquo;t remember my reasoning When I write a blog post, my code seems to be better. Perhaps explaining things to people encourages me to be more precise I like to think top down, but the compiler forces me to write code bottom up, starting from details and going to higher level concepts  Unhappiness with existing tools Many of the existing literate programming tools work similarly to the original CWeb.</description>
    </item>
    
  </channel>
</rss>